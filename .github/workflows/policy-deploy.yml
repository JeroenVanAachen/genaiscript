name: Central Policy Deploy (test)

on:
  workflow_dispatch:   # manual trigger for first tests
  push:
    branches: [ main ]

permissions:
  contents: read       # allow checkout

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Azure Login (SPN)
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.APP_CLIENT_ID }}
        tenant-id: ${{ secrets.APP_TENANT_ID }}
        client-secret: ${{ secrets.APP_CLIENT_SECRET }}

    - name: Install helper tools
      run: |
        sudo apt-get update -y
        sudo apt-get install -y jq
        # managementgroups extension used for MG operations
        az extension add --name managementgroups --yes || true

    - name: Verify current login (home tenant)
      run: |
        echo "Logged in to home tenant (should be your app's tenant)"
        az account show --query "{name:name, tenantId:tenantId, user:user}" -o json

    - name: Deploy sample policy to tenants (loop)
      env:
        APP_CLIENT_ID: ${{ secrets.APP_CLIENT_ID }}
        APP_CLIENT_SECRET: ${{ secrets.APP_CLIENT_SECRET }}
      run: |
        set -euo pipefail
        TENANTS_FILE="${GITHUB_WORKSPACE}/tenants.json"
        if [ ! -f "$TENANTS_FILE" ]; then
          echo "tenants.json not found at $TENANTS_FILE"
          exit 1
        fi

        # iterate each tenant object in tenants.json
        jq -c '.[]' "$TENANTS_FILE" | while read -r t; do
          tenantId=$(echo "$t" | jq -r '.tenantId')
          mgId=$(echo "$t" | jq -r '.rootMG')
          echo "----> switching to tenant: $tenantId (MG: $mgId)"

          # clear any previous login state, then login specifically to target tenant
          az account clear
          az login --service-principal -u "$APP_CLIENT_ID" -p "$APP_CLIENT_SECRET" --tenant "$tenantId" >/dev/null

          # verify we are in the expected tenant
          currentTenant=$(az account show --query tenantId -o tsv)
          if [ "$currentTenant" != "$tenantId" ]; then
            echo "ERROR: failed to authenticate to tenant $tenantId (currentTenant=$currentTenant)"
            exit 1
          fi

          echo "Authenticated into tenant $tenantId. Now you can run az commands (example below)."

          # Example: check that the management group exists
          az account management-group show --name "$mgId" --query "name" -o tsv || echo "MG $mgId not found (or no permission)"

          # Example: idempotent create-or-update for each policy definition file
          for file in policies/definitions/*.json; do
            [ -f "$file" ] || continue
            defName=$(basename "$file" .json)
            echo " -> ensuring policy definition $defName in MG $mgId"
            exists=$(az policy definition show --name "$defName" --management-group "$mgId" -o json 2>/dev/null || true)
            if [ -z "$exists" ]; then
              az policy definition create \
                --name "$defName" \
                --display-name "$defName" \
                --rules "$file" \
                --mode All \
                --management-group "$mgId"
            else
              az policy definition update \
                --name "$defName" \
                --rules "$file" \
                --management-group "$mgId"
            fi
          done

          echo "----> done for tenant $tenantId"
        done
